{"version":3,"sources":["randQuote.jsx","serviceWorker.js","index.js"],"names":["quotesArr","QuoteGen","props","state","quote","author","quoteindex","clickHandle","bind","index","Math","floor","random","length","this","setState","text","fetch","response","json","setQuote","alert","event","id","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionLeave","key","className","type","value","onClick","TweetIt","encodeURIComponent","React","Component","href","String","target","rel","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAwBIA,EAAW,GAgEIC,E,kDA7Df,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,MAAM,GACNC,OAAQ,GACRC,WAAY,GAEhB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPL,E,uDAab,IAAIC,EAAQC,KAAKC,MAAMD,KAAKE,SAASZ,EAAUa,QAChDC,KAAKC,SAAS,CAACX,MAAMJ,EAAUS,GAAOO,KAAMX,OAAOL,EAAUS,GAAOJ,OAAQC,WAAWG,IACxD,OAA5BT,EAAUS,GAAOJ,QAChBS,KAAKC,SAAS,CAACV,OAAO,gB,mLAOCY,MA3BtB,+B,cA2BKC,E,gBACYA,EAASC,O,cAA3BnB,E,gBACMc,KAAKM,W,yDAEXC,MAAM,EAAD,I,gMAQDC,GACRR,KAAKM,a,+BAML,OACQ,yBAAKG,GAAG,aACJ,kBAAC,qBAAD,CACAC,eAAe,WACfC,uBAAwB,IACxBC,uBAAwB,EACxBC,iBAAiB,GAEjB,yBAAMJ,GAAG,OAAOK,IAAKd,KAAKX,MAAMG,WAAYuB,UAAU,YAAtD,IAAmEf,KAAKX,MAAMC,MAA9E,KACA,yBAAMmB,GAAG,SAASK,IAAKd,KAAKX,MAAMG,WAAa,EAAGuB,UAAU,YAA5D,IAAyEf,KAAKX,MAAME,SAEpF,2BAAOkB,GAAG,YAAYM,UAAU,WAAWC,KAAK,SAASC,MAAM,YAAYC,QAASlB,KAAKP,cACzF,kBAAC0B,EAAD,CAAS7B,MAAO8B,mBAAmBpB,KAAKX,MAAMC,OAAQC,OAAQS,KAAKX,MAAME,c,GAvDtE8B,IAAMC,WAgE7B,SAASH,EAAQ/B,GACb,OACI,yBAAK2B,UAAU,aACX,uBAAGN,GAAG,cAAcc,KAAI,iDACmBC,OAAOpC,EAAME,OADhC,gBAC8CF,EAAMG,QAAUkC,OAAO,SAASC,IAAI,uBACtG,yBAAKjB,GAAG,eAAekB,IAAI,qBAAqBC,IAAI,iBACpD,0BAAMb,UAAU,WAAWN,GAAG,eAA9B,eCpFIoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAK3B,GAAG,WACR,kBAAC,EAAD,QAGF4B,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c860ae87.chunk.js","sourcesContent":["import React from 'react';\nimport './randQuote.css';\nimport { CSSTransitionGroup }  from 'react-transition-group';\n\n//Random Quote Generator - Free Code Camp Front End Libraries Certification - Project 1\n/****************************************************************************************\n *\n * Test Cases:\n * wrapper element id = \"quote-box\"\n * inside #quote-box:\n *  #text element\n *  #author element\n *  clickable element (button) for #newquote\n *  <a> element #tweet-quote\n * \n * at first load it should display a random quote in the #text element\n * clicking #new-quote button should fetch new quote and rerender #text & #author fields\n * a #tweet-quote element should include href = \"twitter.com/intent/tweet\"\n * \n * #quote-box wwrapper should be horizonatally centered\n*****************************************************************************************/\n\n\nconst QAPI = \"https://type.fit/api/quotes\";\nlet quotesArr =[];\n\nclass QuoteGen extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            quote:'', \n            author: '',\n            quoteindex: 0\n        }\n        this.clickHandle = this.clickHandle.bind(this);\n    }\n    \n    setQuote(){\n         /*Pick random index from array of quotes and set state */\n        \n         let index = Math.floor(Math.random()*quotesArr.length)\n        this.setState({quote:quotesArr[index].text, author:quotesArr[index].author, quoteindex:index});\n        if(quotesArr[index].author === null){\n            this.setState({author:\"Anonymous\"});\n        }\n    }\n\n    async componentDidMount() {\n        /* fetch to an API for a JSON quote and parse into array of objects*/\n        try {\n            const response = await fetch(QAPI);\n            quotesArr = await response.json();\n            await this.setQuote();\n        } catch(err) {\n            alert(err);\n        }\n    }   \n\n    componentDidUpdate(){\n        \n    }\n\n    clickHandle(event) {\n        this.setQuote();  \n    };\n\n\n        \n    render() {\n        return(\n                <div id='quote-box'>\n                    <CSSTransitionGroup\n                    transitionName=\"fadeboth\"\n                    transitionEnterTimeout={1000}\n                    transitionLeaveTimeout={0}\n                    transitionLeave={false}\n                    >\n                    <div  id='text' key={this.state.quoteindex} className='fontDefs'>\"{this.state.quote}\"</div>\n                    <div  id='author' key={this.state.quoteindex + 1} className='fontDefs'>-{this.state.author}</div> \n                    </CSSTransitionGroup>\n                    <input id='new-quote' className='fontDefs' type=\"submit\" value=\"New Quote\" onClick={this.clickHandle} />\n                    <TweetIt quote={encodeURIComponent(this.state.quote)} author={this.state.author}/>  \n                </div>\n            )\n\n    }    \n}\n    \n    export default QuoteGen;\n\nfunction TweetIt(props){\n    return(\n        <div className='icoButton'>\n            <a id='tweet-quote' href = \n            {`https://twitter.com/intent/tweet?text=\"${String(props.quote)}\"%0a-${props.author}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                <img id=\"twitter-logo\" src=\"./twitter_bird.png\" alt=\"Twitter Logo\"></img>\n                <span className='fontDefs' id='tweet-quote'>Tweet It!</span>\n            </a>\n        </div> \n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuoteGen from './randQuote.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div id=\"wrapper\">\n    <QuoteGen />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}